---
title: "Graphs"
author: "Riya Mehta"
date: "2023-11-08"
output: html_document
---

```{r}
library(plotly)
library(htmlwidgets)
library(webshot)
library(dplyr)
library(ggmap)
library(ggplot2)
```


```{r}
missing_final <- read.csv("missing_data_cleaned.csv")
substrate_final <- read.csv("substrate_data_cleaned.csv")
state_crime_final <- read.csv("state_crime_cleaned.csv")
```


```{r}
#creates dataframe with counts for each state
missing_counts <- table(missing_final$State)
missing_counts_tab <- data.frame(State = names(missing_counts), Count = as.numeric(missing_counts))

state_mapping <- data.frame(
  State_Abb = c("AL", "AK", "AZ", "AR", "CA", "CO", "CT", "DE", "FL", "GA", "HI", "ID", "IL", "IN", "IA", "KS", "KY", "LA", "ME", "MD", "MA", "MI", "MN", "MS", "MO", "MT", "NE", "NV", "NH", "NJ", "NM", "NY", "NC", "ND", "OH", "OK", "OR", "PA", "RI", "SC", "SD", "TN", "TX", "UT", "VT", "VA", "WA", "WV", "WI", "WY", "DC"),
  State = c("Alabama", "Alaska", "Arizona", "Arkansas", "California", "Colorado", "Connecticut", "Delaware", "Florida", "Georgia", "Hawaii", "Idaho", "Illinois", "Indiana", "Iowa", "Kansas", "Kentucky", "Louisiana", "Maine", "Maryland", "Massachusetts", "Michigan", "Minnesota", "Mississippi", "Missouri", "Montana", "Nebraska", "Nevada", "New Hampshire", "New Jersey", "New Mexico", "New York", "North Carolina", "North Dakota", "Ohio", "Oklahoma", "Oregon", "Pennsylvania", "Rhode Island", "South Carolina", "South Dakota", "Tennessee", "Texas", "Utah", "Vermont", "Virginia", "Washington", "West Virginia", "Wisconsin", "Wyoming", "District of Columbia")
)

missing_counts_tab <- missing_counts_tab %>%
  left_join(state_mapping, by = c("State" = "State"))
```


```{r}
# Define the color palette and title
color_palette <- colorRampPalette(c("white", "#720026"))(100)
outline_color <- "black"
title_text <- "State-wise Distribution of Missing Persons"

# Create the map
map_plot <- plot_ly(data = missing_counts_tab, type = 'choropleth', locations = ~Abb, locationmode = "USA-states", z = ~Count, text = ~paste("State: ", State, "<br>Count of Missing People: ", Count), colors = color_palette) %>%
  colorbar(title = "Count of Missing People") %>%
  layout(
    geo = list(
      scope = "usa",
      showcoastlines = TRUE, # Add coastlines for clarity
      showland = TRUE, # Show land areas
      landcolor = "white", # Set land color to white
      showframe = FALSE, # Remove map frame
      subunitcolor = outline_color # Set the outline color for the US states to gray
    ),
    title = list(
      text = title_text,
      font = list(size = 15, color = "black") # Customize title font size and color
    ),
    paper_bgcolor = "white", # Set the background color to white
    margin = list(t = 120), # Adjust the top margin to move the title lower down
    legend = list(title = "Legend Title") # Customize the legend title
  )

map_plot

saveWidget(map_plot, file = "dist_missing_persons.html")

# Display a download link for the HTML file and the screenshot
cat("<a href='dist_missing_persons.html' download>Download Interactive Map (HTML)</a>")

```


```{r}
mental_illness_data <- missing_counts_tab %>%
  left_join(substrate_final %>% select(State, AMIYR), by = "State")

# Group by State and calculate the average AMIYR
averaged_mental_illness <- missing_counts_tab %>%
  left_join(substrate_final %>% select(State, AMIYR)) %>%
  group_by(State) %>%
  summarize(
    Average_AMIYR = mean(AMIYR, na.rm = TRUE),
    Count = first(Count),
    Abbreviation = first(Abb)
  )

color_palette <- colorRampPalette(c("white", "#720026"))(100)
outline_color <- "#720026"
```

```{r}
register_google(key = "")

# Extract unique locations from the missing_data dataset
city_names <- unique(missing_data[, c("City", "State")])

# Create empty vectors to store the latitudes and longitudes
city_latitudes <- numeric()
city_longitudes <- numeric()

# Loop through unique locations and geocode using your API key
for (i in 1:nrow(city_names)) {
  loc <- city_names[i, ]
  loc_to_geocode <- paste(loc$City, loc$State, sep = ", ")
  result <- geocode(loc_to_geocode)
  city_latitudes[i] <- result$lat
  city_longitudes[i] <- result$lon
}

# Add the latitudes and longitudes to the unique_locations data frame
city_names$Lat <- city_latitudes
city_names$Lon <- city_longitudes
```
```{r}
missing_counts_cities <- missing_final %>%
  group_by(City, State, State_Abb) %>%
  summarize(Count = n()) %>%
  ungroup()

unique_loc_with_counts <- left_join(city_names, missing_counts_cities, by = c("City", "State"))
unique_loc_with_counts[is.na(city_names$Count), "Count"] <- 0


```
```{r}
city_missing_map <- merge(unique_loc_with_counts, missing_counts_tab, by.x = "State", by.y = "State_Abb", all.x = TRUE)
title_text <- "Visualization of Missing Persons by City and State"

# Create the city-level map with both city and state counts
map <- plot_ly(data = city_missing_map, 
               lat = ~Lat, 
               lon = ~Lon, 
               marker = list(size = 6, opacity = 0.3, color = "#720026"), 
               type = 'scattergeo', 
               mode = 'markers', 
               text = ~paste("City: ", City, "<br>State: ", State, "<br>Count (City): ", Count.x, "<br>Count (State): ", Count.y),
               hoverinfo = 'text')

# Customize the map layout
map <- map %>%
  layout(geo = list(scope = 'usa'))

map <- map %>%
  layout(
    title = list(
      text = title_text,
      font = list(size = 15, color = "black") # Customize title font size and color
    ),
    showlegend = FALSE,
    paper_bgcolor = "white", # Set the background color to white
    margin = list(t = 120), # Adjust the top margin to move the title lower down
    legend = list(title = "Legend Title") # Customize the legend title
  )
# Display the map
map

saveWidget(map, file = "dist_missing_persons_city.html")

# Display a download link for the HTML file and the screenshot
cat("<a href='dist_missing_persons_city.html' download>Download Interactive Map (HTML)</a>")
```

```{r}
top_pop_2019 <- state_crime_final %>%
  filter(Year >= 1960 & Year <= 2019) %>%
  filter(Year == 2019) %>%
  arrange(desc(Data.Population)) %>%
  slice(2:11) %>%
  select(State)

top_pop_states_data <- state_crime_final %>%
  filter(State %in% top_pop_2019$State)

# Create an interactive line plot
plot <- ggplot(top_pop_states_data, aes(x = Year, y = Data.Population, color = State)) +
  geom_line() +
  labs(
    x = "Year",
    y = "Population",
    title = "Change in Population Over Time (Top 10 States in 2019)"
  )

interactive_plot <- ggplotly(plot)

title_text <- "Change in Population Over Time (Top 10 States in 2019)"

interactive_plot <- interactive_plot %>%
  layout(
    title = list(
      text = title_text,
      font = list(size = 15, color = "black")
    ),
    xaxis = list(title = "Year"),
    yaxis = list(title = "Population"),
    showlegend = TRUE,
    paper_bgcolor = "white",
    margin = list(t = 120),
    legend = list(title = "Legend Title")
  )

interactive_plot
```

```{r}
missing_2018 <- missing_final %>% filter(Missing_Year == 2018)
state_crime_2018 <- state_crime_final %>% filter(Year == 2018)

# Count the number of missing persons per State in 2017
missing_count_2018 <- missing_2018 %>% count(State)

state_crime_2018 <- state_crime_2018 %>% filter(!is.na(Data.Population))

```

```{r}
#average 2018-2018 populations - add to averaged_mental_illness

missing_count_per_state_year <- missing_final %>%
  count(State, Missing_Year)

proportion_data <- missing_count_per_state_year %>%
  left_join(state_crime_final, by = c("State" = "State", "Missing_Year" = "Year")) %>%
  mutate(Proportion = n * 100000 / Data.Population) %>%
  filter(Missing_Year >= 2016 & Missing_Year <= 2018)

proportion_data <- proportion_data %>%
  group_by(State) %>%
  summarize(Avg_Proportion_Missing_Pop = mean(Proportion))

averaged_data <- averaged_mental_illness %>%
  left_join(proportion_data, by = "State")

averaged_illmon <- substrate_final %>%
  group_by(State) %>%
  summarize(Average_ILLMON = mean(IEMMON, na.rm = TRUE))

averaged_data <- averaged_data %>%
  left_join(averaged_illmon, by = "State")

averaged_txrec3 <- substrate_final %>%
  group_by(State) %>%
  summarize(Average_TXREC3 = mean(TXREC3, na.rm = TRUE))

averaged_data <- averaged_data %>%
  left_join(averaged_txrec3, by = "State")
```

```{r}
geojson <- jsonlite::read_json("GeoJSON.json")
title_text <- "Missing Persons per 100,000 State Population"

map_plot <- plot_ly(data = averaged_data, type = 'choropleth', locations = ~Abbreviation, locationmode = "USA-states", z = ~Avg_Proportion_Missing_Pop, text = ~paste("State: ", State, "<br>Count of Missing People: ", Count), colors = color_palette) %>%
  colorbar(title = "") %>%
  layout(
    geo = list(
      scope = "usa",
      showcoastlines = TRUE, # Add coastlines for clarity
      showland = TRUE, # Show land areas
      landcolor = "white", # Set land color to white
      showframe = FALSE, # Remove map frame
      subunitcolor = outline_color # Set the outline color for the US states to gray
    ),
    title = list(
      text = title_text,
      font = list(size = 15, color = "black") # Customize title font size and color
    ),
    paper_bgcolor = "white", # Set the background color to white
    margin = list(t = 120), # Adjust the top margin to move the title lower down
    legend = list(title = "Legend Title") # Customize the legend title
  )

map_plot

saveWidget(map_plot, file = "dist_missing_persons_100k_alaska.html")

# Display a download link for the HTML file and the screenshot
cat("<a href='dist_missing_persons_100k_alaska.html' download>Download Interactive Map (HTML)</a>")

```

```{r}
# Filter out Alaska from the data
averaged_data_filtered <- averaged_data %>%
  filter(State != "Alaska")

title_text <- "Missing Persons per 100,000 State Population (Excluding Alaska)"

map_plot_filtered <- plot_ly(data = averaged_data_filtered, type = 'choropleth', locations = ~Abbreviation, locationmode = "USA-states", z = ~Avg_Proportion_Missing_Pop, text = ~paste("State: ", State, "<br>Count of Missing People: ", Count), colors = color_palette) %>%
  colorbar(title = "") %>%
  layout(
    geo = list(
      scope = "usa",
      showcoastlines = TRUE, # Add coastlines for clarity
      showland = TRUE, # Show land areas
      landcolor = "white", # Set land color to white
      showframe = FALSE, # Remove map frame
      subunitcolor = outline_color # Set the outline color for the US states to gray
    ),
    title = list(
      text = title_text,
      font = list(size = 15, color = "black") # Customize title font size and color
    ),
    paper_bgcolor = "white", # Set the background color to white
    margin = list(t = 120), # Adjust the top margin to move the title lower down
    legend = list(title = "Legend Title") # Customize the legend title
  )

map_plot_filtered

saveWidget(map_plot_filtered, file = "dist_missing_persons_100k.html")

# Display a download link for the HTML file and the screenshot
cat("<a href='dist_missing_persons_100k.html' download>Download Interactive Map (HTML)</a>")
```

```{r}
title_text <- "State-wise Distribution of Average Illicit Drug Use (ILLOM)"

map_plot <- plot_ly(data = averaged_data, type = 'choropleth', locations = ~Abbreviation, locationmode = "USA-states", z = ~Average_ILLMON, text = ~paste("State: ", State, "<br>Count of Missing People: ", Count), colors = color_palette) %>%
  colorbar(title = "Average ILLMON") %>%
  layout(
    geo = list(
      scope = "usa",
      showcoastlines = TRUE, # Add coastlines for clarity
      showland = TRUE, # Show land areas
      landcolor = "white", # Set land color to white
      showframe = FALSE, # Remove map frame
      subunitcolor = outline_color # Set the outline color for the US states to gray
    ),
    title = list(
      text = title_text,
      font = list(size = 15, color = "black") # Customize title font size and color
    ),
    paper_bgcolor = "white", # Set the background color to white
    margin = list(t = 120), # Adjust the top margin to move the title lower down
    legend = list(title = "Legend Title") # Customize the legend title
  )

map_plot

saveWidget(map_plot, file = "dist_drug_alaska.html")

# Display a download link for the HTML file and the screenshot
cat("<a href='dist_drug_alaska.html' download>Download Interactive Map (HTML)</a>")
```
```{r}
averaged_data$Drug_Missing_Ratio <- averaged_data$Average_ILLMON * averaged_data$Avg_Proportion_Missing_Pop

averaged_data_filtered <- averaged_data %>%
  filter(c(State != "Alaska"), (State != "District of Columbia"))

color_palette <- colorRampPalette(c("white", "#720026"))(100)

title_text <- "Average Illicit Drug Use by Missing Persons Ratio (Excluding Alaska)"

map_plot <- plot_ly(data = averaged_data_filtered, type = 'choropleth', locations = ~Abbreviation, locationmode = "USA-states", z = ~Drug_Missing_Ratio, text = ~paste("State: ", State, "<br>Count of Missing People: ", Count, "<br>Average AMIYR: ", Average_AMIYR), colors = color_palette) %>%
  colorbar(title = "Ratio") %>%
  layout(
    geo = list(
      scope = "usa",
      showcoastlines = TRUE, # Add coastlines for clarity
      showland = TRUE, # Show land areas
      landcolor = "white", # Set land color to white
      showframe = FALSE, # Remove map frame
      subunitcolor = outline_color # Set the outline color for the US states to gray
    ),
    title = list(
      text = title_text,
      font = list(size = 15, color = "black") # Customize title font size and color
    ),
    paper_bgcolor = "white", # Set the background color to white
    margin = list(t = 120), # Adjust the top margin to move the title lower down
    legend = list(title = "Legend Title") # Customize the legend title
  )

map_plot

saveWidget(map_plot, file = "drug_ratio.html")

# Display a download link for the HTML file and the screenshot
cat("<a href='drug_ratio.html' download>Download Interactive Map (HTML)</a>")
```

```{r}
averaged_data$Drug_Missing_Ratio <- averaged_data$Average_ILLMON * averaged_data$Avg_Proportion_Missing_Pop

averaged_data_filtered <- averaged_data %>%
  filter(c(State != "Alaska"), (State != "District of Columbia"))

color_palette <- colorRampPalette(c("white", "#720026"))(100)

title_text <- "Average Illicit Drug Use by Missing Persons Ratio"

map_plot <- plot_ly(data = averaged_data, type = 'choropleth', locations = ~Abbreviation, locationmode = "USA-states", z = ~Drug_Missing_Ratio, text = ~paste("State: ", State, "<br>Count of Missing People: ", Count, "<br>Average ILLMON: ", Average_ILLMON), colors = color_palette) %>%
  colorbar(title = "") %>%
  layout(
    geo = list(
      scope = "usa",
      showcoastlines = TRUE, # Add coastlines for clarity
      showland = TRUE, # Show land areas
      landcolor = "white", # Set land color to white
      showframe = FALSE, # Remove map frame
      subunitcolor = outline_color # Set the outline color for the US states to gray
    ),
    title = list(
      text = title_text,
      font = list(size = 15, color = "black") # Customize title font size and color
    ),
    paper_bgcolor = "white", # Set the background color to white
    margin = list(t = 120), # Adjust the top margin to move the title lower down
    legend = list(title = "Legend Title") # Customize the legend title
  )

map_plot

saveWidget(map_plot, file = "drug_ratio_alaska.html")

# Display a download link for the HTML file and the screenshot
cat("<a href='drug_ratio_alaska.html' download>Download Interactive Map (HTML)</a>")
```
```{r}
averaged_data$Drug_Missing_Ratio <- averaged_data$Average_ILLMON * averaged_data$Avg_Proportion_Missing_Pop

averaged_data_filtered <- averaged_data %>%
  filter(c(State != "Alaska"), (State != "District of Columbia"))

color_palette <- colorRampPalette(c("white", "#720026"))(100)

title_text <- "Average Illicit Drug Use by Missing Persons Ratio (Excluding Alaska)"

map_plot <- plot_ly(data = averaged_data_filtered, type = 'choropleth', locations = ~Abbreviation, locationmode = "USA-states", z = ~Drug_Missing_Ratio, text = ~paste("State: ", State, "<br>Count of Missing People: ", Count, "<br>Average ILLMON: ", Average_ILLMON), colors = color_palette) %>%
  colorbar(title = "") %>%
  layout(
    geo = list(
      scope = "usa",
      showcoastlines = TRUE, # Add coastlines for clarity
      showland = TRUE, # Show land areas
      landcolor = "white", # Set land color to white
      showframe = FALSE, # Remove map frame
      subunitcolor = outline_color # Set the outline color for the US states to gray
    ),
    title = list(
      text = title_text,
      font = list(size = 15, color = "black") # Customize title font size and color
    ),
    paper_bgcolor = "white", # Set the background color to white
    margin = list(t = 120), # Adjust the top margin to move the title lower down
    legend = list(title = "Legend Title") # Customize the legend title
  )

map_plot
```


```{r}
title_text <- "State-wise Distribution of Average Any Mental Illness (AMIYR) Score"

map_plot <- plot_ly(data = averaged_data, type = 'choropleth', locations = ~Abbreviation, locationmode = "USA-states", z = ~Average_AMIYR, text = ~paste("State: ", State, "<br>Count of Missing People: ", Count), colors = color_palette) %>%
  colorbar(title = "Average AMIYR") %>%
  layout(
    geo = list(
      scope = "usa",
      showcoastlines = TRUE, # Add coastlines for clarity
      showland = TRUE, # Show land areas
      landcolor = "white", # Set land color to white
      showframe = FALSE, # Remove map frame
      subunitcolor = outline_color # Set the outline color for the US states to gray
    ),
    title = list(
      text = title_text,
      font = list(size = 15, color = "black") # Customize title font size and color
    ),
    paper_bgcolor = "white", # Set the background color to white
    margin = list(t = 120), # Adjust the top margin to move the title lower down
    legend = list(title = "Legend Title") # Customize the legend title
  )

map_plot

saveWidget(map_plot, file = "mentalhealth_missing.html")

# Display a download link for the HTML file and the screenshot
cat("<a href='mentalhealth_missing.html' download>Download Interactive Map (HTML)</a>")
```
```{r}
averaged_data$Mental_Missing_Ratio <- averaged_data$Average_AMIYR * averaged_data$Avg_Proportion_Missing_Pop

averaged_data_filtered <- averaged_data %>%
  filter(c(State != "Alaska"), (State != "District of Columbia"))

color_palette <- colorRampPalette(c("white", "#720026"))(100)

title_text <- "Average Mental Health Illness by Missing Persons Ratio (Excluding Alaska)"

map_plot <- plot_ly(data = averaged_data_filtered, type = 'choropleth', locations = ~Abbreviation, locationmode = "USA-states", z = ~Mental_Missing_Ratio, text = ~paste("State: ", State, "<br>Count of Missing People: ", Count, "<br>Average AMIYR: ", Average_AMIYR), colors = color_palette) %>%
  colorbar(title = "Ratio") %>%
  layout(
    geo = list(
      scope = "usa",
      showcoastlines = TRUE, # Add coastlines for clarity
      showland = TRUE, # Show land areas
      landcolor = "white", # Set land color to white
      showframe = FALSE, # Remove map frame
      subunitcolor = outline_color # Set the outline color for the US states to gray
    ),
    title = list(
      text = title_text,
      font = list(size = 15, color = "black") # Customize title font size and color
    ),
    paper_bgcolor = "white", # Set the background color to white
    margin = list(t = 120), # Adjust the top margin to move the title lower down
    legend = list(title = "Legend Title") # Customize the legend title
  )

map_plot

saveWidget(map_plot, file = "mentalhealth_ratio.html")

# Display a download link for the HTML file and the screenshot
cat("<a href='mentalhealth_ratio.html' download>Download Interactive Map (HTML)</a>")
```
```{r}
averaged_data$Mental_Missing_Ratio <- averaged_data$Average_AMIYR * averaged_data$Avg_Proportion_Missing_Pop

averaged_data_filtered <- averaged_data %>%
  filter(c(State != "Alaska"), (State != "District of Columbia"))

color_palette <- colorRampPalette(c("white", "#720026"))(100)

title_text <- "Average Mental Health Illness by Missing Persons Ratio"

map_plot <- plot_ly(data = averaged_data, type = 'choropleth', locations = ~Abbreviation, locationmode = "USA-states", z = ~Mental_Missing_Ratio, text = ~paste("State: ", State, "<br>Count of Missing People: ", Count, "<br>Average AMIYR: ", Average_AMIYR), colors = color_palette) %>%
  colorbar(title = "Ratio") %>%
  layout(
    geo = list(
      scope = "usa",
      showcoastlines = TRUE, # Add coastlines for clarity
      showland = TRUE, # Show land areas
      landcolor = "white", # Set land color to white
      showframe = FALSE, # Remove map frame
      subunitcolor = outline_color # Set the outline color for the US states to gray
    ),
    title = list(
      text = title_text,
      font = list(size = 15, color = "black") # Customize title font size and color
    ),
    paper_bgcolor = "white", # Set the background color to white
    margin = list(t = 120), # Adjust the top margin to move the title lower down
    legend = list(title = "Legend Title") # Customize the legend title
  )

map_plot

saveWidget(map_plot, file = "mentalhealth_ratio_alaska.html")

# Display a download link for the HTML file and the screenshot
cat("<a href='mentalhealth_ratio_alaska.html' download>Download Interactive Map (HTML)</a>")
```


```{r}
title_text <- "Illicit Drug Use vs Proportion of Missing Persons in State Population"
hover_text <- paste("State: ", averaged_data$State, "<br>ILLMON: ", averaged_data$Average_ILLMON, "<br>Proportion Missing Population: ", averaged_data$Avg_Proportion_Missing_Pop)

 illicit_drug_scatter <- plot_ly(
  data = averaged_data,
  x = ~Average_ILLMON,
  y = ~Avg_Proportion_Missing_Pop,
  text = hover_text,
  mode = "markers",
  marker = list(size = 12, color = "#720026", opacity = 0.5)
) %>%
  layout(
    title = list(
      text = title_text,
      font = list(size = 15, color = "black") # Customize title font size and color
    ),
    xaxis = list(title = "Average Illicit Drug Use (ILLOM) Score", titlefont = list(size = 12)),
    yaxis = list(
      title = "Missing Persons per 100k",
      titlefont = list(size = 12) # Adjust the y-axis title font size
    ),
    showlegend = FALSE,
    paper_bgcolor = "white", # Set the background color to white
    margin = list(t = 120), # Adjust the top margin to move the title lower down
    legend = list(title = "Legend Title") # Customize the legend title
  )

illicit_drug_scatter

saveWidget(illicit_drug_scatter, file = "drug_scatter_alaska.html")

# Display a download link for the HTML file and the screenshot
cat("<a href='drug_scatter_alaska.html' download>Download Interactive Map (HTML)</a>")
```
```{r}
title_text <- "Mental Illness vs Proportion of Missing Persons in State Population"
hover_text <- paste("State: ", averaged_data$State, "<br>AMIYR: ", averaged_data$Average_AMIYR, "<br>Proportion Missing Population: ", averaged_data$Avg_Proportion_Missing_Pop)

mental_scatter <- plot_ly(
  data = averaged_data,
  x = ~Average_AMIYR,
  y = ~Avg_Proportion_Missing_Pop,
  text = hover_text,
  mode = "markers",
  marker = list(size = 12, color = "#720026", opacity = 0.5)
) %>%
layout(
    title = list(
      text = title_text,
      font = list(size = 15, color = "black") # Customize title font size and color
    ),
    xaxis = list(title = "Average Any Mental Illness (AMI) Score (18 or older)", titlefont = list(size = 12)),
    yaxis = list(
      title = "Missing Persons per 100k",
      titlefont = list(size = 12) # Adjust the y-axis title font size
    ),
    showlegend = FALSE,
    paper_bgcolor = "white", # Set the background color to white
    margin = list(t = 120), # Adjust the top margin to move the title lower down
    legend = list(title = "Legend Title") # Customize the legend title
  )

mental_scatter

saveWidget(mental_scatter, file = "mentalhealth_scatter_alaska.html")

# Display a download link for the HTML file and the screenshot
cat("<a href='mentalhealth_scatter_alaska.html' download>Download Interactive Map (HTML)</a>")
```
```{r}
title_text <- "Mental Illness vs Proportion of Missing Persons in State (Excluding Alaska)"
hover_text <- paste("State: ", averaged_data_filtered$State, "<br>AMIYR: ", averaged_data_filtered$Average_AMIYR, "<br>Proportion Missing Population: ", averaged_data_filtered$Avg_Proportion_Missing_Pop)

mental_scatter2 <- plot_ly(
  data = averaged_data_filtered,
  x = ~Average_AMIYR,
  y = ~Avg_Proportion_Missing_Pop,
  text = hover_text,
  mode = "markers",
  marker = list(size = 12, color = "#720026", opacity = 0.5)
) %>%
layout(
    title = list(
      text = title_text,
      font = list(size = 15, color = "black") # Customize title font size and color
    ),
    xaxis = list(title = "Average Any Mental Illness (AMI) Score (18 or older)", titlefont = list(size = 12)),
    yaxis = list(
      title = "Missing Persons per 100k",
      titlefont = list(size = 12) # Adjust the y-axis title font size
    ),
    showlegend = FALSE,
    paper_bgcolor = "white", # Set the background color to white
    margin = list(t = 120), # Adjust the top margin to move the title lower down
    legend = list(title = "Legend Title") # Customize the legend title
  )

mental_scatter2

saveWidget(mental_scatter2, file = "mentalhealth_scatter.html")

# Display a download link for the HTML file and the screenshot
cat("<a href='mentalhealth_scatter.html' download>Download Interactive Map (HTML)</a>")
```

```{r}
title_text <- "Illicit Drug Use vs Proportion of Missing Persons (Excluding Alaska)"
hover_text <- paste("State: ", averaged_data_filtered$State, "<br>ILLMON: ", averaged_data_filtered$Average_ILLMON, "<br>Proportion Missing Population: ", averaged_data_filtered$Avg_Proportion_Missing_Pop)

 illicit_drug_scatter2 <- plot_ly(
  data = averaged_data_filtered,
  x = ~Average_ILLMON,
  y = ~Avg_Proportion_Missing_Pop,
  text = hover_text,
  mode = "markers",
  marker = list(size = 12, color = "#720026", opacity = 0.5)
) %>%
  layout(
    title = list(
      text = title_text,
      font = list(size = 15, color = "black") # Customize title font size and color
    ),
    xaxis = list(title = "Average Illicit Drug Use (ILLOM) Score", titlefont = list(size = 12)),
    yaxis = list(
      title = "Missing Persons per 100k",
      titlefont = list(size = 12) # Adjust the y-axis title font size
    ),
    showlegend = FALSE,
    paper_bgcolor = "white", # Set the background color to white
    margin = list(t = 120), # Adjust the top margin to move the title lower down
    legend = list(title = "Legend Title") # Customize the legend title
  )

illicit_drug_scatter2

saveWidget(illicit_drug_scatter2, file = "drug_scatter.html")

# Display a download link for the HTML file and the screenshot
cat("<a href='drug_scatter.html' download>Download Interactive Map (HTML)</a>")
```


```{r}
title_text <- "Average Violent Crime Rates Over Time (Reported offenses per 100,000 population)"

state_crime_new_dates <- state_crime_final %>%
  filter(Year >= 1960 & Year <= 2018)

averaged_crimes_year <- state_crime_new_dates %>%
  group_by(Year) %>%
  summarize(Average_Violent_Crime = mean(Data.Rates.Violent.All, na.rm = TRUE))

state_crime_less_dates <- state_crime_final %>%
  filter(Year >= 2016 & Year <= 2018)

averaged_crimes_state <- state_crime_less_dates %>%
  group_by(State) %>%
  summarize(Average_Violent_Crime = mean(Data.Rates.Violent.All, na.rm = TRUE))

# Create an interactive line plot
crime_plot <- plot_ly(
  data = averaged_crimes,
  x = ~Year,
  y = ~Average_Violent_Crime,
  type = 'scatter',
  mode = 'lines+markers',
  marker = list(size = 6, color = '#720026'),
  line = list(color = '#720026')
) %>%
layout(
    title = list(
      text = title_text,
      font = list(size = 15, color = "black") # Customize title font size and color
    ),
    xaxis = list(title = "Year", titlefont = list(size = 12)),
    yaxis = list(
      title = "Average Violent Crime Rates",
      titlefont = list(size = 12) # Adjust the y-axis title font size
    ),
    showlegend = FALSE,
    paper_bgcolor = "white", # Set the background color to white
    margin = list(t = 120), # Adjust the top margin to move the title lower down
    legend = list(title = "Legend Title") # Customize the legend title
  )

crime_plot

saveWidget(crime_plot, file = "crime.html")

# Display a download link for the HTML file and the screenshot
cat("<a href='crime.html' download>Download Interactive Map (HTML)</a>")
```

```{r}
averaged_data <- left_join(averaged_data, averaged_crimes_state, by = "State")
```

```{r}
title_text <- "State-wise Distribution of Average Violent Crime (per 100,000 Population)"

map_plot <- plot_ly(data = averaged_data, type = 'choropleth', locations = ~Abbreviation, locationmode = "USA-states", z = ~Average_Violent_Crime, text = ~paste("State: ", State, "<br>Count of Missing People: ", Count), colors = color_palette) %>%
  colorbar(title = "") %>%
  layout(
    geo = list(
      scope = "usa",
      showcoastlines = TRUE, # Add coastlines for clarity
      showland = TRUE, # Show land areas
      landcolor = "white", # Set land color to white
      showframe = FALSE, # Remove map frame
      subunitcolor = outline_color # Set the outline color for the US states to gray
    ),
    title = list(
      text = title_text,
      font = list(size = 15, color = "black") # Customize title font size and color
    ),
    paper_bgcolor = "white", # Set the background color to white
    margin = list(t = 120), # Adjust the top margin to move the title lower down
    legend = list(title = "Legend Title") # Customize the legend title
  )

map_plot

saveWidget(map_plot, file = "dist_crimes_100k.html")

# Display a download link for the HTML file and the screenshot
cat("<a href='dist_crimes_100k.html' download>Download Interactive Map (HTML)</a>")
```
```{r}
averaged_data$Crime_Missing_Ratio <- averaged_data$Average_Violent_Crime * averaged_data$Avg_Proportion_Missing_Pop

averaged_data_filtered <- averaged_data %>%
  filter(c(State != "Alaska"), (State != "District of Columbia"))

color_palette <- colorRampPalette(c("white", "#720026"))(100)

title_text <- "Violent Crime by Missing Persons Ratio (Excluding Alaska)"

map_plot <- plot_ly(data = averaged_data_filtered, type = 'choropleth', locations = ~Abbreviation, locationmode = "USA-states", z = ~Crime_Missing_Ratio, text = ~paste("State: ", State, "<br>Count of Missing People: ", Count, "<br>Average Violent Crime Rate: ", Average_Violent_Crime), colors = color_palette) %>%
  colorbar(title = "Ratio") %>%
  layout(
    geo = list(
      scope = "usa",
      showcoastlines = TRUE, # Add coastlines for clarity
      showland = TRUE, # Show land areas
      landcolor = "white", # Set land color to white
      showframe = FALSE, # Remove map frame
      subunitcolor = outline_color # Set the outline color for the US states to gray
    ),
    title = list(
      text = title_text,
      font = list(size = 15, color = "black") # Customize title font size and color
    ),
    paper_bgcolor = "white", # Set the background color to white
    margin = list(t = 120), # Adjust the top margin to move the title lower down
    legend = list(title = "Legend Title") # Customize the legend title
  )

map_plot

saveWidget(map_plot, file = "crime_ratio.html")

# Display a download link for the HTML file and the screenshot
cat("<a href='crime_ratio.html' download>Download Interactive Map (HTML)</a>")
```
```{r}
averaged_data$Crime_Missing_Ratio <- averaged_data$Average_Violent_Crime * averaged_data$Avg_Proportion_Missing_Pop

averaged_data_filtered <- averaged_data %>%
  filter(c(State != "Alaska"), (State != "District of Columbia"))

color_palette <- colorRampPalette(c("white", "#720026"))(100)

title_text <- "Violent Crime by Missing Persons Ratio"

map_plot <- plot_ly(data = averaged_data, type = 'choropleth', locations = ~Abbreviation, locationmode = "USA-states", z = ~Crime_Missing_Ratio, text = ~paste("State: ", State, "<br>Count of Missing People: ", Count, "<br>Average Violent Crime Rate: ", Average_Violent_Crime), colors = color_palette) %>%
  colorbar(title = "Ratio") %>%
  layout(
    geo = list(
      scope = "usa",
      showcoastlines = TRUE, # Add coastlines for clarity
      showland = TRUE, # Show land areas
      landcolor = "white", # Set land color to white
      showframe = FALSE, # Remove map frame
      subunitcolor = outline_color # Set the outline color for the US states to gray
    ),
    title = list(
      text = title_text,
      font = list(size = 15, color = "black") # Customize title font size and color
    ),
    paper_bgcolor = "white", # Set the background color to white
    margin = list(t = 120), # Adjust the top margin to move the title lower down
    legend = list(title = "Legend Title") # Customize the legend title
  )

map_plot

saveWidget(map_plot, file = "crime_ratio_alaska.html")

# Display a download link for the HTML file and the screenshot
cat("<a href='crime_ratio_alaska.html' download>Download Interactive Map (HTML)</a>")
```



```{r}
title_text <- "State-wise Distribution of Average Violent Crime per 100,000 population (Excluding Alaska)"

map_plot <- plot_ly(data = averaged_data_filtered, type = 'choropleth', locations = ~Abbreviation, locationmode = "USA-states", z = ~Average_Violent_Crime, text = ~paste("State: ", State, "<br>Count of Missing People: ", Count), colors = color_palette) %>%
  colorbar(title = "") %>%
  layout(
    geo = list(
      scope = "usa",
      showcoastlines = TRUE, # Add coastlines for clarity
      showland = TRUE, # Show land areas
      landcolor = "white", # Set land color to white
      showframe = FALSE, # Remove map frame
      subunitcolor = outline_color # Set the outline color for the US states to gray
    ),
    title = list(
      text = title_text,
      font = list(size = 15, color = "black") # Customize title font size and color
    ),
    paper_bgcolor = "white", # Set the background color to white
    margin = list(t = 120), # Adjust the top margin to move the title lower down
    legend = list(title = "Legend Title") # Customize the legend title
  )

map_plot

saveWidget(map_plot, file = "dist_crime_100k.html")

# Display a download link for the HTML file and the screenshot
cat("<a href='dist_crime_100k.html' download>Download Interactive Map (HTML)</a>")
```
```{r}
title_text <- "Violent Crime Rates vs Proportion of Missing Persons in State Population"
hover_text <- paste("State: ", averaged_data$State, "<br>Average Violent Crime Rate: ", averaged_data$Average_Violent_Crime, "<br>Proportion Missing Population: ", averaged_data$Avg_Proportion_Missing_Pop)

crime_scatter <- plot_ly(
  data = averaged_data,
  x = ~Average_Violent_Crime,
  y = ~Avg_Proportion_Missing_Pop,
  text = hover_text,
  mode = "markers",
  marker = list(size = 12, color = "#720026", opacity = 0.5)
) %>%
layout(
    title = list(
      text = title_text,
      font = list(size = 15, color = "black") # Customize title font size and color
    ),
    xaxis = list(title = "Average Violent Crime Rate", titlefont = list(size = 12)),
    yaxis = list(
      title = "Missing Persons per 100k",
      titlefont = list(size = 12) # Adjust the y-axis title font size
    ),
    showlegend = FALSE,
    paper_bgcolor = "white", # Set the background color to white
    margin = list(t = 120), # Adjust the top margin to move the title lower down
    legend = list(title = "Legend Title") # Customize the legend title
  )

crime_scatter

saveWidget(crime_scatter, file = "crime_prop_alaska.html")

# Display a download link for the HTML file and the screenshot
cat("<a href='crime_prop_alaska.html' download>Download Interactive Map (HTML)</a>")
```
```{r}
title_text <- "Violent Crime Rates vs Proportion of Missing Persons in State Population (Excluding Alaska)"
hover_text <- paste("State: ", averaged_data_filtered$State, "<br>Average Violent Crime Rate: ", averaged_data_filtered$Average_Violent_Crime, "<br>Proportion Missing Population: ", averaged_data_filtered$Avg_Proportion_Missing_Pop)

crime_scatter <- plot_ly(
  data = averaged_data_filtered,
  x = ~Average_Violent_Crime,
  y = ~Avg_Proportion_Missing_Pop,
  text = hover_text,
  mode = "markers",
  marker = list(size = 12, color = "#720026", opacity = 0.5)
) %>%
layout(
    title = list(
      text = title_text,
      font = list(size = 15, color = "black") # Customize title font size and color
    ),
    xaxis = list(title = "Average Violent Crime Rate", titlefont = list(size = 12)),
    yaxis = list(
      title = "Missing Persons per 100k",
      titlefont = list(size = 12) # Adjust the y-axis title font size
    ),
    showlegend = FALSE,
    paper_bgcolor = "white", # Set the background color to white
    margin = list(t = 120), # Adjust the top margin to move the title lower down
    legend = list(title = "Legend Title") # Customize the legend title
  )

crime_scatter

saveWidget(crime_scatter, file = "crime_prop.html")

# Display a download link for the HTML file and the screenshot
cat("<a href='crime_prop.html' download>Download Interactive Map (HTML)</a>")

```

```{r}
library(plotly)

missing_sex <- table(missing_final$Biological.Sex)

# Define custom colors for each category
colors <- c("#720026", "#CE4257")

# Create an interactive donut chart
donut_chart <- plot_ly(
  labels = names(missing_sex),
  values = missing_sex,
  type = "pie",
  hole = 0.6,  # Specify the size of the hole to create a donut chart
  marker = list(colors = colors)  # Specify custom colors for each section
) %>%
layout(
  title = list(
    text = "Distribution of Missing Persons by Gender (Sex)",
    font = list(size = 15, color = "black")
  ),
  paper_bgcolor = "white",
  margin = list(t = 120),
  legend = list(title = "Legend Title")
)

# Display the interactive donut chart
donut_chart

saveWidget(donut_chart, file = "sex_pie.html")

# Display a download link for the HTML file and the screenshot
cat("<a href='sex_pie.html' download>Download Interactive Map (HTML)</a>")
```
```{r}
missing_state_sex <- missing_final %>%
  group_by(State, Biological.Sex) %>%
  summarise(Count = n()) %>%
  ungroup()

# Step 2: Create the stacked bar chart
stacked_bar_chart <- plot_ly(
  data = missing_state_sex,
  x = ~State,
  y = ~Count,
  type = 'bar',
  color = ~Biological.Sex,  # Use sex for color differentiation
  colors = c("#CE4257", "#720026"),  # Custom colors for sex categories
  text = ~paste("State: ", State, "<br>Sex: ", Biological.Sex, "<br>Count: ", Count),
  hoverinfo = "text"
) %>%
  layout(
    title = list(
      text = "Distribution of Missing Persons by State and Sex",
      font = list(size = 15, color = "black")
    ),
    barmode = 'stack',  # Stack the bars
    xaxis = list(title = "State", titlefont = list(size = 12)),
    yaxis = list(title = "Total Count of Missing People", titlefont = list(size = 12)),
    paper_bgcolor = "white",
    margin = list(t = 120),
    legend = list(title = "Sex")
  )

# Display the interactive stacked bar chart
stacked_bar_chart

saveWidget(stacked_bar_chart, file = "sex_stacked_bar.html")

# Display a download link for the HTML file and the screenshot
cat("<a href='sex_stacked_bar.html' download>Download Interactive Map (HTML)</a>")
```

